// These are the interfaces for all the states in this game
import { IBaseGameObjectState, IBaseGameState, IBasePlayerState } from "src/viseur/game";

// This is a file generated by the Creer, it may have empty interfaces,
// but we need them, so let's disable that tslint rule
// tslint:disable:no-empty-interface

/**
 * Gather branches and build up your lodge as beavers fight to survive.
 */
export interface IGameState extends IBaseGameState {
    /**
     * Every Beaver in the game.
     */
    readonly beavers: IBeaverState[];

    /**
     * The player whose turn it is currently. That player can send commands.
     * Other players cannot.
     */
    readonly currentPlayer: IPlayerState;

    /**
     * The current turn number, starting at 0 for the first player's turn.
     */
    readonly currentTurn: number;

    /**
     * When a Player has less Beavers than this number, then recruiting other
     * Beavers is free.
     */
    readonly freeBeaversCount: number;

    /**
     * A mapping of every game object's ID to the actual game object. Primarily
     * used by the server and client to easily refer to the game objects via ID.
     */
    readonly gameObjects: {[id: string]: IGameObjectState};

    /**
     * All the Jobs that Beavers can have in the game.
     */
    readonly jobs: IJobState[];

    /**
     * Constant number used to calculate what it costs to spawn a new lodge.
     */
    readonly lodgeCostConstant: number;

    /**
     * How many lodges must be owned by a Player at once to win the game.
     */
    readonly lodgesToWin: number;

    /**
     * The number of Tiles in the map along the y (vertical) axis.
     */
    readonly mapHeight: number;

    /**
     * The number of Tiles in the map along the x (horizontal) axis.
     */
    readonly mapWidth: number;

    /**
     * The maximum number of turns before the game will automatically end.
     */
    readonly maxTurns: number;

    /**
     * List of all the players in the game.
     */
    readonly players: IPlayerState[];

    /**
     * A unique identifier for the game instance that is being played.
     */
    readonly session: string;

    /**
     * Every Spawner in the game.
     */
    readonly spawner: ISpawnerState[];

    /**
     * Constant number used to calculate how many branches/food Beavers harvest
     * from Spawners.
     */
    readonly spawnerHarvestConstant: number;

    /**
     * All the types of Spawners in the game.
     */
    readonly spawnerTypes: string[];

    /**
     * All the tiles in the map, stored in Row-major order. Use `x + y *
     * mapWidth` to access the correct index.
     */
    readonly tiles: ITileState[];

}

/**
 * A beaver in the game.
 */
export interface IBeaverState extends IGameObjectState {
    /**
     * The number of actions remaining for the Beaver this turn.
     */
    readonly actions: number;

    /**
     * The amount of branches this Beaver is holding.
     */
    readonly branches: number;

    /**
     * The amount of food this Beaver is holding.
     */
    readonly food: number;

    /**
     * How much health this Beaver has left.
     */
    readonly health: number;

    /**
     * The Job this Beaver was recruited to do.
     */
    readonly job: IJobState;

    /**
     * How many moves this Beaver has left this turn.
     */
    readonly moves: number;

    /**
     * The Player that owns and can control this Beaver.
     */
    readonly owner: IPlayerState;

    /**
     * True if the Beaver has finished being recruited and can do things, False
     * otherwise.
     */
    readonly recruited: boolean;

    /**
     * The Tile this Beaver is on.
     */
    readonly tile: ITileState;

    /**
     * Number of turns this Beaver is distracted for (0 means not distracted).
     */
    readonly turnsDistracted: number;

}

/**
 * An object in the game. The most basic class that all game classes should
 * inherit from automatically.
 */
export interface IGameObjectState extends IBaseGameObjectState {
    /**
     * String representing the top level Class that this game object is an
     * instance of. Used for reflection to create new instances on clients, but
     * exposed for convenience should AIs want this data.
     */
    readonly gameObjectName: string;

    /**
     * A unique id for each instance of a GameObject or a sub class. Used for
     * client and server communication. Should never change value after being
     * set.
     */
    readonly id: string;

    /**
     * Any strings logged will be stored here. Intended for debugging.
     */
    readonly logs: string[];

}

/**
 * Information about a beaver's job.
 */
export interface IJobState extends IGameObjectState {
    /**
     * The number of actions this Job can make per turn.
     */
    readonly actions: number;

    /**
     * How many combined resources a beaver with this Job can hold at once.
     */
    readonly carryLimit: number;

    /**
     * Scalar for how many branches this Job harvests at once.
     */
    readonly chopping: number;

    /**
     * How much food this Job costs to recruit.
     */
    readonly cost: number;

    /**
     * The amount of damage this Job does per attack.
     */
    readonly damage: number;

    /**
     * How many turns a beaver attacked by this Job is distracted by.
     */
    readonly distractionPower: number;

    /**
     * The amount of starting health this Job has.
     */
    readonly health: number;

    /**
     * The number of moves this Job can make per turn.
     */
    readonly moves: number;

    /**
     * Scalar for how much food this Job harvests at once.
     */
    readonly munching: number;

    /**
     * The Job title.
     */
    readonly title: string;

}

/**
 * A player in this game. Every AI controls one player.
 */
export interface IPlayerState extends IGameObjectState, IBasePlayerState {
    /**
     * The list of Beavers owned by this Player.
     */
    readonly beavers: IBeaverState[];

    /**
     * How many branches are required to build a lodge for this Player.
     */
    readonly branchesToBuildLodge: number;

    /**
     * What type of client this is, e.g. 'Python', 'JavaScript', or some other
     * language. For potential data mining purposes.
     */
    readonly clientType: string;

    /**
     * A list of Tiles that contain lodges owned by this player.
     */
    readonly lodges: ITileState[];

    /**
     * If the player lost the game or not.
     */
    readonly lost: boolean;

    /**
     * The name of the player.
     */
    readonly name: string;

    /**
     * This player's opponent in the game.
     */
    readonly opponent: IPlayerState;

    /**
     * The reason why the player lost the game.
     */
    readonly reasonLost: string;

    /**
     * The reason why the player won the game.
     */
    readonly reasonWon: string;

    /**
     * The amount of time (in ns) remaining for this AI to send commands.
     */
    readonly timeRemaining: number;

    /**
     * If the player won the game or not.
     */
    readonly won: boolean;

}

/**
 * A resource spawner that generates branches or food.
 */
export interface ISpawnerState extends IGameObjectState {
    /**
     * True if this Spawner has been harvested this turn, and it will not heal
     * at the end of the turn, false otherwise.
     */
    readonly hasBeenHarvested: boolean;

    /**
     * How much health this Spawner has, which is used to calculate how much of
     * its resource can be harvested.
     */
    readonly health: number;

    /**
     * The Tile this Spawner is on.
     */
    readonly tile: ITileState;

    /**
     * What type of resource this is ('food' or 'branches').
     */
    readonly type: string;

}

/**
 * A Tile in the game that makes up the 2D map grid.
 */
export interface ITileState extends IGameObjectState {
    /**
     * The Beaver on this Tile if present, otherwise null.
     */
    readonly beaver: IBeaverState;

    /**
     * The number of branches dropped on this Tile.
     */
    readonly branches: number;

    /**
     * The cardinal direction water is flowing on this Tile ('North', 'East',
     * 'South', 'West').
     */
    readonly flowDirection: string;

    /**
     * The number of food dropped on this Tile.
     */
    readonly food: number;

    /**
     * The owner of the Beaver lodge on this Tile, if present, otherwise null.
     */
    readonly lodgeOwner: IPlayerState;

    /**
     * The resource Spawner on this Tile if present, otherwise null.
     */
    readonly spawner: ISpawnerState;

    /**
     * The Tile to the 'East' of this one (x+1, y). Null if out of bounds of the
     * map.
     */
    readonly tileEast: ITileState;

    /**
     * The Tile to the 'North' of this one (x, y-1). Null if out of bounds of
     * the map.
     */
    readonly tileNorth: ITileState;

    /**
     * The Tile to the 'South' of this one (x, y+1). Null if out of bounds of
     * the map.
     */
    readonly tileSouth: ITileState;

    /**
     * The Tile to the 'West' of this one (x-1, y). Null if out of bounds of the
     * map.
     */
    readonly tileWest: ITileState;

    /**
     * What type of Tile this is, either 'Water' or 'Land'.
     */
    readonly type: string;

    /**
     * The x (horizontal) position of this Tile.
     */
    readonly x: number;

    /**
     * The y (vertical) position of this Tile.
     */
    readonly y: number;

}
