// These are the interfaces for all the states in this game
import { IBaseGameObjectState, IBaseGameState, IBasePlayerState } from "src/viseur/game";

// This is a file generated by the Creer, it may have empty interfaces,
// but we need them, so let's disable that tslint rule
// tslint:disable:no-empty-interface

/**
 * Steal from merchants and become the most infamous pirate.
 */
export interface IGameState extends IBaseGameState {
    /**
     * How much gold it costs to construct a single crew.
     */
    readonly crewCost: number;

    /**
     * How much damage crew deal to each other.
     */
    readonly crewDamage: number;

    /**
     * The maximum amount of health a crew member can have.
     */
    readonly crewHealth: number;

    /**
     * A crew's attack range. Range is circular.
     */
    readonly crewRange: number;

    /**
     * The player whose turn it is currently. That player can send commands.
     * Other players cannot.
     */
    readonly currentPlayer: IPlayerState;

    /**
     * The current turn number, starting at 0 for the first player's turn.
     */
    readonly currentTurn: number;

    /**
     * A mapping of every game object's ID to the actual game object. Primarily
     * used by the server and client to easily refer to the game objects via ID.
     */
    readonly gameObjects: {[id: string]: IGameObjectState};

    /**
     * The number of Tiles in the map along the y (vertical) axis.
     */
    readonly mapHeight: number;

    /**
     * The number of Tiles in the map along the x (horizontal) axis.
     */
    readonly mapWidth: number;

    /**
     * The Euclidean distance from a Player port required to reach
     * maxInterestRate.
     */
    readonly maxInterestDistance: number;

    /**
     * The maximum rate buried gold can increase over time.
     */
    readonly maxInterestRate: number;

    /**
     * The maximum number of turns before the game will automatically end.
     */
    readonly maxTurns: number;

    /**
     * List of all the players in the game.
     */
    readonly players: IPlayerState[];

    /**
     * Every Port in the game.
     */
    readonly port: IPortState[];

    /**
     * How much gold it costs to construct a port.
     */
    readonly portCost: number;

    /**
     * The maximum amount of health a Port can have.
     */
    readonly portHealth: number;

    /**
     * A unique identifier for the game instance that is being played.
     */
    readonly session: string;

    /**
     * How much gold it costs to construct a ship.
     */
    readonly shipCost: number;

    /**
     * How much damage ships deal to ships and ports.
     */
    readonly shipDamage: number;

    /**
     * The maximum amount of health a ship can have.
     */
    readonly shipHealth: number;

    /**
     * A ship's attack range. Range is circular.
     */
    readonly shipRange: number;

    /**
     * All the tiles in the map, stored in Row-major order. Use `x + y *
     * mapWidth` to access the correct index.
     */
    readonly tiles: ITileState[];

    /**
     * Every Unit in the game.
     */
    readonly units: IUnitState[];

}

/**
 * An object in the game. The most basic class that all game classes should
 * inherit from automatically.
 */
export interface IGameObjectState extends IBaseGameObjectState {
    /**
     * String representing the top level Class that this game object is an
     * instance of. Used for reflection to create new instances on clients, but
     * exposed for convenience should AIs want this data.
     */
    readonly gameObjectName: string;

    /**
     * A unique id for each instance of a GameObject or a sub class. Used for
     * client and server communication. Should never change value after being
     * set.
     */
    readonly id: string;

    /**
     * Any strings logged will be stored here. Intended for debugging.
     */
    readonly logs: string[];

}

/**
 * A player in this game. Every AI controls one player.
 */
export interface IPlayerState extends IGameObjectState, IBasePlayerState {
    /**
     * What type of client this is, e.g. 'Python', 'JavaScript', or some other
     * language. For potential data mining purposes.
     */
    readonly clientType: string;

    /**
     * The amount of gold this Player has in reserve.
     */
    readonly gold: number;

    /**
     * The amount of infamy this Player has.
     */
    readonly infamy: number;

    /**
     * If the player lost the game or not.
     */
    readonly lost: boolean;

    /**
     * The name of the player.
     */
    readonly name: string;

    /**
     * This player's opponent in the game.
     */
    readonly opponent: IPlayerState;

    /**
     * The ports owned by this Player.
     */
    readonly ports: IPortState[];

    /**
     * The reason why the player lost the game.
     */
    readonly reasonLost: string;

    /**
     * The reason why the player won the game.
     */
    readonly reasonWon: string;

    /**
     * This Player's starting port.
     */
    readonly startingPort: IPortState;

    /**
     * The amount of time (in ns) remaining for this AI to send commands.
     */
    readonly timeRemaining: number;

    /**
     * Every Unit owned by this Player.
     */
    readonly units: IUnitState[];

    /**
     * If the player won the game or not.
     */
    readonly won: boolean;

}

/**
 * A port on a Tile.
 */
export interface IPortState extends IGameObjectState {
    /**
     * Whether this Port has created a Unit this turn.
     */
    readonly cooldown: boolean;

    /**
     * Whether this Port can be destroyed.
     */
    readonly destroyable: number;

    /**
     * (Merchants only) How much gold this Port has accumulated. Once this port
     * can afford to create a ship, it will spend gold to construct one.
     */
    readonly gold: number;

    /**
     * How much health this Port has.
     */
    readonly health: number;

    /**
     * (Merchants only) How much gold this Port accumulates each turn.
     */
    readonly investment: number;

    /**
     * The owner of this Port, or null if owned by merchants.
     */
    readonly owner: IPlayerState;

    /**
     * The Tile this Port is on.
     */
    readonly tile: ITileState;

}

/**
 * A Tile in the game that makes up the 2D map grid.
 */
export interface ITileState extends IGameObjectState {
    /**
     * The amount of gold buried on this tile.
     */
    readonly gold: number;

    /**
     * The Port on this Tile if present, otherwise null.
     */
    readonly port: IPortState;

    /**
     * The Tile to the 'East' of this one (x+1, y). Null if out of bounds of the
     * map.
     */
    readonly tileEast: ITileState;

    /**
     * The Tile to the 'North' of this one (x, y-1). Null if out of bounds of
     * the map.
     */
    readonly tileNorth: ITileState;

    /**
     * The Tile to the 'South' of this one (x, y+1). Null if out of bounds of
     * the map.
     */
    readonly tileSouth: ITileState;

    /**
     * The Tile to the 'West' of this one (x-1, y). Null if out of bounds of the
     * map.
     */
    readonly tileWest: ITileState;

    /**
     * The type of Tile this is ('water' or 'land').
     */
    readonly type: string;

    /**
     * The Unit on this Tile if present, otherwise null.
     */
    readonly unit: IUnitState;

    /**
     * The x (horizontal) position of this Tile.
     */
    readonly x: number;

    /**
     * The y (vertical) position of this Tile.
     */
    readonly y: number;

}

/**
 * A unit group in the game. This may consist of a ship and any number of crew.
 */
export interface IUnitState extends IGameObjectState {
    /**
     * Whether this Unit has performed its action this turn.
     */
    readonly acted: boolean;

    /**
     * How many crew are on this Tile. This number will always be <= crewHealth.
     */
    readonly crew: number;

    /**
     * How much total health the crew on this Tile have.
     */
    readonly crewHealth: number;

    /**
     * How much gold this Unit is carrying.
     */
    readonly gold: number;

    /**
     * How many more times this Unit may move this turn.
     */
    readonly moves: number;

    /**
     * The Player that owns and can control this Unit, or null if the Unit is
     * neutral.
     */
    readonly owner: IPlayerState;

    /**
     * (Merchants only) The path this Unit will follow. The first element is the
     * Tile this Unit will move to next.
     */
    readonly path: ITileState;

    /**
     * If a ship is on this Tile, how much health it has remaining. 0 for no
     * ship.
     */
    readonly shipHealth: number;

    /**
     * The Tile this Unit is on.
     */
    readonly tile: ITileState;

}
