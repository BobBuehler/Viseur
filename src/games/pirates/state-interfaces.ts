// These are the interfaces for all the states in this game
import { IBaseGame, IBaseGameObject, IBasePlayer } from "@cadre/ts-utils/cadre";

// This is a file generated by the Creer, it may have empty interfaces,
// but we need them, so let's disable that tslint rule
// tslint:disable:no-empty-interface

/**
 * Steal from merchants and become the most infamous pirate.
 */
export interface IGameState extends IBaseGame {
    /**
     * The rate buried gold increases each turn.
     */
    buryInterestRate: number;

    /**
     * How much gold it costs to construct a single crew.
     */
    crewCost: number;

    /**
     * How much damage crew deal to each other.
     */
    crewDamage: number;

    /**
     * The maximum amount of health a crew member can have.
     */
    crewHealth: number;

    /**
     * The number of moves Units with only crew are given each turn.
     */
    crewMoves: number;

    /**
     * A crew's attack range. Range is circular.
     */
    crewRange: number;

    /**
     * The player whose turn it is currently. That player can send commands.
     * Other players cannot.
     */
    currentPlayer: IPlayerState;

    /**
     * The current turn number, starting at 0 for the first player's turn.
     */
    currentTurn: number;

    /**
     * A mapping of every game object's ID to the actual game object. Primarily
     * used by the server and client to easily refer to the game objects via ID.
     */
    gameObjects: {[id: string]: IGameObjectState};

    /**
     * How much health a Unit recovers when they rest.
     */
    healFactor: number;

    /**
     * The number of Tiles in the map along the y (vertical) axis.
     */
    mapHeight: number;

    /**
     * The number of Tiles in the map along the x (horizontal) axis.
     */
    mapWidth: number;

    /**
     * The maximum number of turns before the game will automatically end.
     */
    maxTurns: number;

    /**
     * How much gold merchant Ports get each turn.
     */
    merchantGoldRate: number;

    /**
     * When a merchant ship spawns, the amount of additional gold it has
     * relative to the Port's investment.
     */
    merchantInterestRate: number;

    /**
     * The Euclidean distance buried gold must be from the Player's Port to
     * accumulate interest.
     */
    minInterestDistance: number;

    /**
     * List of all the players in the game.
     */
    players: IPlayerState[];

    /**
     * Every Port in the game. Merchant ports have owner set to null.
     */
    ports: IPortState[];

    /**
     * How far a Unit can be from a Port to rest. Range is circular.
     */
    restRange: number;

    /**
     * A unique identifier for the game instance that is being played.
     */
    session: string;

    /**
     * How much gold it costs to construct a ship.
     */
    shipCost: number;

    /**
     * How much damage ships deal to ships and ports.
     */
    shipDamage: number;

    /**
     * The maximum amount of health a ship can have.
     */
    shipHealth: number;

    /**
     * The number of moves Units with ships are given each turn.
     */
    shipMoves: number;

    /**
     * A ship's attack range. Range is circular.
     */
    shipRange: number;

    /**
     * All the tiles in the map, stored in Row-major order. Use `x + y *
     * mapWidth` to access the correct index.
     */
    tiles: ITileState[];

    /**
     * The amount of time (in nano-seconds) added after each player performs a
     * turn.
     */
    timeAddedPerTurn: number;

    /**
     * Every Unit in the game. Merchant units have targetPort set to a port.
     */
    units: IUnitState[];

}

/**
 * An object in the game. The most basic class that all game classes should
 * inherit from automatically.
 */
export interface IGameObjectState extends IBaseGameObject {
    /**
     * String representing the top level Class that this game object is an
     * instance of. Used for reflection to create new instances on clients, but
     * exposed for convenience should AIs want this data.
     */
    gameObjectName: string;

    /**
     * A unique id for each instance of a GameObject or a sub class. Used for
     * client and server communication. Should never change value after being
     * set.
     */
    id: string;

    /**
     * Any strings logged will be stored here. Intended for debugging.
     */
    logs: string[];

}

/**
 * A player in this game. Every AI controls one player.
 */
export interface IPlayerState extends IGameObjectState, IBasePlayer {
    /**
     * What type of client this is, e.g. 'Python', 'JavaScript', or some other
     * language. For potential data mining purposes.
     */
    clientType: string;

    /**
     * The amount of gold this Player has in reserve.
     */
    gold: number;

    /**
     * The amount of infamy this Player has.
     */
    infamy: number;

    /**
     * If the player lost the game or not.
     */
    lost: boolean;

    /**
     * The name of the player.
     */
    name: string;

    /**
     * This player's opponent in the game.
     */
    opponent: IPlayerState;

    /**
     * The Port owned by this Player.
     */
    port: IPortState;

    /**
     * The reason why the player lost the game.
     */
    reasonLost: string;

    /**
     * The reason why the player won the game.
     */
    reasonWon: string;

    /**
     * The amount of time (in ns) remaining for this AI to send commands.
     */
    timeRemaining: number;

    /**
     * Every Unit owned by this Player.
     */
    units: IUnitState[];

    /**
     * If the player won the game or not.
     */
    won: boolean;

}

/**
 * A port on a Tile.
 */
export interface IPortState extends IGameObjectState {
    /**
     * For players, how much more gold this Port can spend this turn. For
     * merchants, how much gold this Port has accumulated (it will spawn a ship
     * when the Port can afford one).
     */
    gold: number;

    /**
     * (Merchants only) How much gold was invested into this Port. Investment
     * determines the strength and value of the next ship.
     */
    investment: number;

    /**
     * The owner of this Port, or null if owned by merchants.
     */
    owner: IPlayerState;

    /**
     * The Tile this Port is on.
     */
    tile: ITileState;

}

/**
 * A Tile in the game that makes up the 2D map grid.
 */
export interface ITileState extends IGameObjectState {
    /**
     * (Visualizer only) Whether this tile is deep sea or grassy. This has no
     * effect on gameplay, but feel free to use it if you want.
     */
    decoration: boolean;

    /**
     * The amount of gold buried on this tile.
     */
    gold: number;

    /**
     * The Port on this Tile if present, otherwise null.
     */
    port: IPortState;

    /**
     * The Tile to the 'East' of this one (x+1, y). Null if out of bounds of the
     * map.
     */
    tileEast: ITileState;

    /**
     * The Tile to the 'North' of this one (x, y-1). Null if out of bounds of
     * the map.
     */
    tileNorth: ITileState;

    /**
     * The Tile to the 'South' of this one (x, y+1). Null if out of bounds of
     * the map.
     */
    tileSouth: ITileState;

    /**
     * The Tile to the 'West' of this one (x-1, y). Null if out of bounds of the
     * map.
     */
    tileWest: ITileState;

    /**
     * The type of Tile this is ('water' or 'land').
     */
    type: "water" | "land";

    /**
     * The Unit on this Tile if present, otherwise null.
     */
    unit: IUnitState;

    /**
     * The x (horizontal) position of this Tile.
     */
    x: number;

    /**
     * The y (vertical) position of this Tile.
     */
    y: number;

}

/**
 * A unit group in the game. This may consist of a ship and any number of crew.
 */
export interface IUnitState extends IGameObjectState {
    /**
     * Whether this Unit has performed its action this turn.
     */
    acted: boolean;

    /**
     * How many crew are on this Tile. This number will always be <= crewHealth.
     */
    crew: number;

    /**
     * How much total health the crew on this Tile have.
     */
    crewHealth: number;

    /**
     * How much gold this Unit is carrying.
     */
    gold: number;

    /**
     * How many more times this Unit may move this turn.
     */
    moves: number;

    /**
     * The Player that owns and can control this Unit, or null if the Unit is
     * neutral.
     */
    owner: IPlayerState;

    /**
     * (Merchants only) The path this Unit will follow. The first element is the
     * Tile this Unit will move to next.
     */
    path: ITileState[];

    /**
     * If a ship is on this Tile, how much health it has remaining. 0 for no
     * ship.
     */
    shipHealth: number;

    /**
     * (Merchants only) The number of turns this merchant ship won't be able to
     * move. They will still attack. Merchant ships are stunned when they're
     * attacked.
     */
    stunTurns: number;

    /**
     * (Merchants only) The Port this Unit is moving to.
     */
    targetPort: IPortState;

    /**
     * The Tile this Unit is on.
     */
    tile: ITileState;

}
