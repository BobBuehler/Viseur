// These are the interfaces for all the states in this game
import { IBaseGameObjectState, IBaseGameState, IBasePlayerState } from "src/viseur/game";

// This is a file generated by the Creer, it may have empty interfaces,
// but we need them, so let's disable that tslint rule
// tslint:disable:no-empty-interface

/**
 * Use cowboys to have a good time and play some music on a Piano, while
 * brawling with enemy Cowboys.
 */
export interface IGameState extends IBaseGameState {
    /**
     * How many turns a Bartender will be busy for after throwing a Bottle.
     */
    readonly bartenderCooldown: number;

    /**
     * All the beer Bottles currently flying across the saloon in the game.
     */
    readonly bottles: IBottleState[];

    /**
     * How much damage is applied to neighboring things bit by the Sharpshooter
     * between turns.
     */
    readonly brawlerDamage: number;

    /**
     * Every Cowboy in the game.
     */
    readonly cowboys: ICowboyState[];

    /**
     * The player whose turn it is currently. That player can send commands.
     * Other players cannot.
     */
    readonly currentPlayer: IPlayerState;

    /**
     * The current turn number, starting at 0 for the first player's turn.
     */
    readonly currentTurn: number;

    /**
     * Every furnishing in the game.
     */
    readonly furnishings: IFurnishingState[];

    /**
     * A mapping of every game object's ID to the actual game object. Primarily
     * used by the server and client to easily refer to the game objects via ID.
     */
    readonly gameObjects: {[id: string]: IGameObjectState};

    /**
     * All the jobs that Cowboys can be called in with.
     */
    readonly jobs: string[];

    /**
     * The number of Tiles in the map along the y (vertical) axis.
     */
    readonly mapHeight: number;

    /**
     * The number of Tiles in the map along the x (horizontal) axis.
     */
    readonly mapWidth: number;

    /**
     * The maximum number of Cowboys a Player can bring into the saloon of each
     * specific job.
     */
    readonly maxCowboysPerJob: number;

    /**
     * The maximum number of turns before the game will automatically end.
     */
    readonly maxTurns: number;

    /**
     * List of all the players in the game.
     */
    readonly players: IPlayerState[];

    /**
     * When a player's rowdiness reaches or exceeds this number their Cowboys
     * take a collective siesta.
     */
    readonly rowdinessToSiesta: number;

    /**
     * A unique identifier for the game instance that is being played.
     */
    readonly session: string;

    /**
     * How much damage is applied to things hit by Sharpshooters when they act.
     */
    readonly sharpshooterDamage: number;

    /**
     * How long siestas are for a player's team.
     */
    readonly siestaLength: number;

    /**
     * All the tiles in the map, stored in Row-major order. Use `x + y *
     * mapWidth` to access the correct index.
     */
    readonly tiles: ITileState[];

    /**
     * How many turns a Cowboy will be drunk for if a bottle breaks on it.
     */
    readonly turnsDrunk: number;

}

/**
 * A bottle thrown by a bartender at a Tile.
 */
export interface IBottleState extends IGameObjectState {
    /**
     * The Direction this Bottle is flying and will move to between turns, can
     * be 'North', 'East', 'South', or 'West'.
     */
    readonly direction: string;

    /**
     * The direction any Cowboys hit by this will move, can be 'North', 'East',
     * 'South', or 'West'.
     */
    readonly drunkDirection: string;

    /**
     * True if this Bottle has impacted and has been destroyed (removed from the
     * Game). False if still in the game flying through the saloon.
     */
    readonly isDestroyed: boolean;

    /**
     * The Tile this bottle is currently flying over.
     */
    readonly tile: ITileState;

}

/**
 * A person on the map that can move around and interact within the saloon.
 */
export interface ICowboyState extends IGameObjectState {
    /**
     * If the Cowboy can be moved this turn via its owner.
     */
    readonly canMove: boolean;

    /**
     * The direction this Cowboy is moving while drunk. Will be 'North', 'East',
     * 'South', or 'West' when drunk; or '' (empty string) when not drunk.
     */
    readonly drunkDirection: string;

    /**
     * How much focus this Cowboy has. Different Jobs do different things with
     * their Cowboy's focus.
     */
    readonly focus: number;

    /**
     * How much health this Cowboy currently has.
     */
    readonly health: number;

    /**
     * If this Cowboy is dead and has been removed from the game.
     */
    readonly isDead: boolean;

    /**
     * If this Cowboy is drunk, and will automatically walk.
     */
    readonly isDrunk: boolean;

    /**
     * The job that this Cowboy does, and dictates how they fight and interact
     * within the Saloon.
     */
    readonly job: string;

    /**
     * The Player that owns and can control this Cowboy.
     */
    readonly owner: IPlayerState;

    /**
     * The Tile that this Cowboy is located on.
     */
    readonly tile: ITileState;

    /**
     * How many times this unit has been drunk before taking their siesta and
     * reseting this to 0.
     */
    readonly tolerance: number;

    /**
     * How many turns this unit has remaining before it is no longer busy and
     * can `act()` or `play()` again.
     */
    readonly turnsBusy: number;

}

/**
 * An furnishing in the Saloon that must be pathed around, or destroyed.
 */
export interface IFurnishingState extends IGameObjectState {
    /**
     * How much health this Furnishing currently has.
     */
    readonly health: number;

    /**
     * If this Furnishing has been destroyed, and has been removed from the
     * game.
     */
    readonly isDestroyed: boolean;

    /**
     * True if this Furnishing is a piano and can be played, False otherwise.
     */
    readonly isPiano: boolean;

    /**
     * If this is a piano and a Cowboy is playing it this turn.
     */
    readonly isPlaying: boolean;

    /**
     * The Tile that this Furnishing is located on.
     */
    readonly tile: ITileState;

}

/**
 * An object in the game. The most basic class that all game classes should
 * inherit from automatically.
 */
export interface IGameObjectState extends IBaseGameObjectState {
    /**
     * String representing the top level Class that this game object is an
     * instance of. Used for reflection to create new instances on clients, but
     * exposed for convenience should AIs want this data.
     */
    readonly gameObjectName: string;

    /**
     * A unique id for each instance of a GameObject or a sub class. Used for
     * client and server communication. Should never change value after being
     * set.
     */
    readonly id: string;

    /**
     * Any strings logged will be stored here. Intended for debugging.
     */
    readonly logs: string[];

}

/**
 * A player in this game. Every AI controls one player.
 */
export interface IPlayerState extends IGameObjectState, IBasePlayerState {
    /**
     * What type of client this is, e.g. 'Python', 'JavaScript', or some other
     * language. For potential data mining purposes.
     */
    readonly clientType: string;

    /**
     * Every Cowboy owned by this Player.
     */
    readonly cowboys: ICowboyState[];

    /**
     * How many enemy Cowboys this player's team has killed.
     */
    readonly kills: number;

    /**
     * If the player lost the game or not.
     */
    readonly lost: boolean;

    /**
     * The name of the player.
     */
    readonly name: string;

    /**
     * This player's opponent in the game.
     */
    readonly opponent: IPlayerState;

    /**
     * The reason why the player lost the game.
     */
    readonly reasonLost: string;

    /**
     * The reason why the player won the game.
     */
    readonly reasonWon: string;

    /**
     * How rowdy their team is. When it gets too high their team takes a
     * collective siesta.
     */
    readonly rowdiness: number;

    /**
     * How many times their team has played a piano.
     */
    readonly score: number;

    /**
     * 0 when not having a team siesta. When greater than 0 represents how many
     * turns left for the team siesta to complete.
     */
    readonly siesta: number;

    /**
     * The amount of time (in ns) remaining for this AI to send commands.
     */
    readonly timeRemaining: number;

    /**
     * If the player won the game or not.
     */
    readonly won: boolean;

    /**
     * The YoungGun this Player uses to call in new Cowboys.
     */
    readonly youngGun: IYoungGunState;

}

/**
 * A Tile in the game that makes up the 2D map grid.
 */
export interface ITileState extends IGameObjectState {
    /**
     * The beer Bottle currently flying over this Tile.
     */
    readonly bottle: IBottleState;

    /**
     * The Cowboy that is on this Tile, null otherwise.
     */
    readonly cowboy: ICowboyState;

    /**
     * The furnishing that is on this Tile, null otherwise.
     */
    readonly furnishing: IFurnishingState;

    /**
     * If this Tile is pathable, but has a hazard that damages Cowboys that path
     * through it.
     */
    readonly hasHazard: boolean;

    /**
     * If this Tile is a balcony of the Saloon that YoungGuns walk around on,
     * and can never be pathed through by Cowboys.
     */
    readonly isBalcony: boolean;

    /**
     * The Tile to the 'East' of this one (x+1, y). Null if out of bounds of the
     * map.
     */
    readonly tileEast: ITileState;

    /**
     * The Tile to the 'North' of this one (x, y-1). Null if out of bounds of
     * the map.
     */
    readonly tileNorth: ITileState;

    /**
     * The Tile to the 'South' of this one (x, y+1). Null if out of bounds of
     * the map.
     */
    readonly tileSouth: ITileState;

    /**
     * The Tile to the 'West' of this one (x-1, y). Null if out of bounds of the
     * map.
     */
    readonly tileWest: ITileState;

    /**
     * The x (horizontal) position of this Tile.
     */
    readonly x: number;

    /**
     * The y (vertical) position of this Tile.
     */
    readonly y: number;

    /**
     * The YoungGun on this tile, null otherwise.
     */
    readonly youngGun: IYoungGunState;

}

/**
 * An eager young person that wants to join your gang, and will call in the
 * veteran Cowboys you need to win the brawl in the saloon.
 */
export interface IYoungGunState extends IGameObjectState {
    /**
     * The Tile that a Cowboy will be called in on if this YoungGun calls in a
     * Cowboy.
     */
    readonly callInTile: ITileState;

    /**
     * True if the YoungGun can call in a Cowboy, false otherwise.
     */
    readonly canCallIn: boolean;

    /**
     * The Player that owns and can control this YoungGun.
     */
    readonly owner: IPlayerState;

    /**
     * The Tile this YoungGun is currently on.
     */
    readonly tile: ITileState;

}
