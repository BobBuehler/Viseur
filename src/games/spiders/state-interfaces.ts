// These are the interfaces for all the states in this game
import { IBaseGame, IBaseGameObject, IBasePlayer } from "@cadre/ts-utils/cadre";

// This is a file generated by the Creer, it may have empty interfaces,
// but we need them, so let's disable that tslint rule
// tslint:disable:no-empty-interface

/**
 * There's an infestation of enemy spiders challenging your queen broodmother
 * spider! Protect her and attack the other broodmother in this turn based, node
 * based, game.
 */
export interface IGameState extends IBaseGame {
    /**
     * The player whose turn it is currently. That player can send commands.
     * Other players cannot.
     */
    currentPlayer: IPlayerState;

    /**
     * The current turn number, starting at 0 for the first player's turn.
     */
    currentTurn: number;

    /**
     * The speed at which Cutters work to do cut Webs.
     */
    cutSpeed: number;

    /**
     * Constant used to calculate how many eggs BroodMothers get on their
     * owner's turns.
     */
    eggsScalar: number;

    /**
     * A mapping of every game object's ID to the actual game object. Primarily
     * used by the server and client to easily refer to the game objects via ID.
     */
    gameObjects: {[id: string]: IGameObjectState};

    /**
     * The starting strength for Webs.
     */
    initialWebStrength: number;

    /**
     * The maximum number of turns before the game will automatically end.
     */
    maxTurns: number;

    /**
     * The maximum strength a web can be strengthened to.
     */
    maxWebStrength: number;

    /**
     * The speed at which Spiderlings move on Webs.
     */
    movementSpeed: number;

    /**
     * Every Nest in the game.
     */
    nests: INestState[];

    /**
     * List of all the players in the game.
     */
    players: IPlayerState[];

    /**
     * A unique identifier for the game instance that is being played.
     */
    session: string;

    /**
     * The speed at which Spitters work to spit new Webs.
     */
    spitSpeed: number;

    /**
     * The amount of time (in nano-seconds) added after each player performs a
     * turn.
     */
    timeAddedPerTurn: number;

    /**
     * How much web strength is added or removed from Webs when they are weaved.
     */
    weavePower: number;

    /**
     * The speed at which Weavers work to do strengthens and weakens on Webs.
     */
    weaveSpeed: number;

    /**
     * Every Web in the game.
     */
    webs: IWebState[];

}

/**
 * The Spider Queen. She alone can spawn Spiderlings for each Player, and if she
 * dies the owner loses.
 */
export interface IBroodMotherState extends ISpiderState {
    /**
     * How many eggs the BroodMother has to spawn Spiderlings this turn.
     */
    eggs: number;

    /**
     * How much health this BroodMother has left. When it reaches 0, she dies
     * and her owner loses.
     */
    health: number;

}

/**
 * A Spiderling that can cut existing Webs.
 */
export interface ICutterState extends ISpiderlingState {
    /**
     * The Web that this Cutter is trying to cut. Null if not cutting.
     */
    cuttingWeb: IWebState;

}

/**
 * An object in the game. The most basic class that all game classes should
 * inherit from automatically.
 */
export interface IGameObjectState extends IBaseGameObject {
    /**
     * String representing the top level Class that this game object is an
     * instance of. Used for reflection to create new instances on clients, but
     * exposed for convenience should AIs want this data.
     */
    gameObjectName: string;

    /**
     * A unique id for each instance of a GameObject or a sub class. Used for
     * client and server communication. Should never change value after being
     * set.
     */
    id: string;

    /**
     * Any strings logged will be stored here. Intended for debugging.
     */
    logs: string[];

}

/**
 * A location (node) connected to other Nests via Webs (edges) in the game that
 * Spiders can converge on, regardless of owner.
 */
export interface INestState extends IGameObjectState {
    /**
     * The Player that 'controls' this Nest as they have the most Spiders on
     * this nest.
     */
    controllingPlayer: IPlayerState;

    /**
     * All the Spiders currently located on this Nest.
     */
    spiders: ISpiderState[];

    /**
     * Webs that connect to this Nest.
     */
    webs: IWebState[];

    /**
     * The X coordinate of the Nest. Used for distance calculations.
     */
    x: number;

    /**
     * The Y coordinate of the Nest. Used for distance calculations.
     */
    y: number;

}

/**
 * A player in this game. Every AI controls one player.
 */
export interface IPlayerState extends IGameObjectState, IBasePlayer {
    /**
     * This player's BroodMother. If it dies they lose the game.
     */
    broodMother: IBroodMotherState;

    /**
     * What type of client this is, e.g. 'Python', 'JavaScript', or some other
     * language. For potential data mining purposes.
     */
    clientType: string;

    /**
     * If the player lost the game or not.
     */
    lost: boolean;

    /**
     * The max number of Spiderlings players can spawn.
     */
    maxSpiderlings: number;

    /**
     * The name of the player.
     */
    name: string;

    /**
     * The number of nests this player controls.
     */
    numberOfNestsControlled: number;

    /**
     * This player's opponent in the game.
     */
    opponent: IPlayerState;

    /**
     * The reason why the player lost the game.
     */
    reasonLost: string;

    /**
     * The reason why the player won the game.
     */
    reasonWon: string;

    /**
     * All the Spiders owned by this player.
     */
    spiders: ISpiderState[];

    /**
     * The amount of time (in ns) remaining for this AI to send commands.
     */
    timeRemaining: number;

    /**
     * If the player won the game or not.
     */
    won: boolean;

}

/**
 * A Spider in the game. The most basic unit.
 */
export interface ISpiderState extends IGameObjectState {
    /**
     * If this Spider is dead and has been removed from the game.
     */
    isDead: boolean;

    /**
     * The Nest that this Spider is currently on. Null when moving on a Web.
     */
    nest: INestState;

    /**
     * The Player that owns this Spider, and can command it.
     */
    owner: IPlayerState;

}

/**
 * A Spider spawned by the BroodMother.
 */
export interface ISpiderlingState extends ISpiderState {
    /**
     * When empty string this Spiderling is not busy, and can act. Otherwise a
     * string representing what it is busy with, e.g. 'Moving', 'Attacking'.
     */
    busy: string;

    /**
     * The Web this Spiderling is using to move. Null if it is not moving.
     */
    movingOnWeb: IWebState;

    /**
     * The Nest this Spiderling is moving to. Null if it is not moving.
     */
    movingToNest: INestState;

    /**
     * The number of Spiderlings busy with the same work this Spiderling is
     * doing, speeding up the task.
     */
    numberOfCoworkers: number;

    /**
     * How much work needs to be done for this Spiderling to finish being busy.
     * See docs for the Work forumla.
     */
    workRemaining: number;

}

/**
 * A Spiderling that creates and spits new Webs from the Nest it is on to
 * another Nest, connecting them.
 */
export interface ISpitterState extends ISpiderlingState {
    /**
     * The Nest that this Spitter is creating a Web to spit at, thus connecting
     * them. Null if not spitting.
     */
    spittingWebToNest: INestState;

}

/**
 * A Spiderling that can alter existing Webs by weaving to add or remove silk
 * from the Webs, thus altering its strength.
 */
export interface IWeaverState extends ISpiderlingState {
    /**
     * The Web that this Weaver is strengthening. Null if not strengthening.
     */
    strengtheningWeb: IWebState;

    /**
     * The Web that this Weaver is weakening. Null if not weakening.
     */
    weakeningWeb: IWebState;

}

/**
 * A connection (edge) to a Nest (node) in the game that Spiders can converge on
 * (regardless of owner). Spiders can travel in either direction on Webs.
 */
export interface IWebState extends IGameObjectState {
    /**
     * How long this Web is, i.e., the distance between its nestA and nestB.
     */
    length: number;

    /**
     * How much weight this Web currently has on it, which is the sum of all its
     * Spiderlings weight.
     */
    load: number;

    /**
     * The first Nest this Web is connected to.
     */
    nestA: INestState;

    /**
     * The second Nest this Web is connected to.
     */
    nestB: INestState;

    /**
     * All the Spiderlings currently moving along this Web.
     */
    spiderlings: ISpiderlingState[];

    /**
     * How much weight this Web can take before snapping and destroying itself
     * and all the Spiders on it.
     */
    strength: number;

}
